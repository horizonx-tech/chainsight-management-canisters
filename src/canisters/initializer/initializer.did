type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type CycleManagement = record {
  refueling_amount : nat;
  initial_supply : nat;
  refueling_threshold : nat;
};
type CycleManagements = record {
  db : CycleManagement;
  vault_intial_supply : nat;
  refueling_interval : nat64;
  proxy : CycleManagement;
  indexer : CycleManagement;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type InitializeOutput = record {
  db : principal;
  vault : principal;
  proxy : principal;
};
type MetricsSnapshot = record { cycles : nat; timestamp : nat64 };
service : {
  call_canister_status : (principal) -> (CanisterStatusResponse);
  get_last_metrics : () -> (opt MetricsSnapshot) query;
  get_metrics_interval_secs : () -> (opt nat64) query;
  get_registry : () -> (principal) query;
  initialize : (principal, CycleManagements) -> (InitializeOutput);
  set_registry : (principal) -> ();
  start_metrics_timer : (nat64) -> ();
  upgrade_proxies : () -> ();
}