type CallLog = record {
  at : int;
  interactTo : principal;
  canister : principal;
};
type ComponentInfo = record {
  db : principal;
  vault : principal;
  target : principal;
};
type Error = record { message : text };
type ExecutionResult = record {
  is_succeeded : bool;
  error : opt Error;
  timestamp : nat64;
};
type IndexingConfig = record {
  method : text;
  args : vec nat8;
  task_interval_secs : nat32;
  delay_secs : opt nat32;
  is_rounded_start_time : opt bool;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant {
  Ok : record { vec nat8 };
  Err : record { RejectionCode; text };
};
service : (principal, principal, principal, principal) -> {
  db : () -> (principal) query;
  get_component_info : () -> (ComponentInfo) query;
  get_indexing_config : () -> (IndexingConfig) query;
  initializer : () -> (principal) query;
  last_execution_result : () -> (ExecutionResult) query;
  last_succeeded : () -> (nat64) query;
  list_logs : (principal, int, int) -> (vec CallLog);
  next_schedule : () -> (nat64) query;
  proxy_call : (text, vec nat8) -> (Result);
  registry : () -> (principal) query;
  request_upgrades_to_registry : () -> ();
  restart_indexing : () -> ();
  set_registry : (principal) -> ();
  start_indexing : (nat32, nat32, text, vec nat8) -> ();
  start_indexing_with_is_rounded : (nat32, nat32, bool, text, vec nat8) -> ();
  target : () -> (principal) query;
  vault : () -> (principal) query;
}